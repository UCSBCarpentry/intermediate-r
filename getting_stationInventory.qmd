---
title: "getting_stationInventory"
format: html
editor: visual
---

## Scenario

You want to download hictoric monthly Precipitation data from [NOAA's Global Historical Climatology Network monthly (GHCNm)](https://www.ncei.noaa.gov/products/land-based-station/global-historical-climatology-network-monthly).

You only need data for certain weather stations, not all the weather stations in the world. You see in their [website](https://www.ncei.noaa.gov/data/ghcnm/v4/precipitation/) that you can download the complete dataset from the archive/ folder, which has a size of 223 MB compressed and around 4.5 GB uncompressed, or you can download a file for each weather station from the access/ folder.

The first option will take you a long time, and can be troublesome to have the entire dataset that you don't need. Therefore, you go with option 2, but you want to do this efficiently using R, instead of downloading each individual file by clicking in the browser.

For the sake of time and demonstration, we will only be downloading data from 3 small countries: Cyprus (CY), Eritrea (ER), and Saint Lucia (ST).

## Getting the list of weather stations

Before starting to download the precipitation data, let's first read the inventory of weather stations available at (<https://www.ncei.noaa.gov/data/ghcnm/v4/precipitation/doc/ghcn-m_v4_prcp_inventory.txt>). This will give us a list of of all weather stations worldwide, along with its identifier (which contains the country where it's located), the state/province where it's located, and the first and last years for which it contains data.

```{r}
# Import libraries and create necessary directories
library(tidyverse)
library(tictoc)

dir.create("data")
dir.create("data/raw")
dir.create("data/processed")
dir.create("data/raw/weather_stations")
```

```{r}
# Download Inventory file
download.file(
  url = "https://www.ncei.noaa.gov/data/ghcnm/v4/precipitation/doc/ghcn-m_v4_prcp_inventory.txt",
  destfile = "data/raw/ghcn-m_v4_prcp_inventory.txt"
              )

# Read fixed-width file
station_inventory <- read_fwf(
  file = "data/raw/ghcn-m_v4_prcp_inventory.txt")

# Rename columns
colnames(station_inventory) <- c("stationId", "latitude", "longitude",
                                  "elevation","state", "stationName",
                                  "wmoId", "firstYear", "lastYear")
```

Create a column with the country code, which is the first two characters of stationId

```{r}
#Create empty column
station_inventory$country = ""

tic()
for (i in 1:nrow(station_inventory)) {
  station_inventory[i, "country"] = 
    substring(station_inventory[i, "stationId"], 1, 2)
}
toc()
```

But this is not the most efficient way of doing it. We can instead use a vectorized version of this function provided by the stringr package from the tidyverse.

```{r}
tic()
station_inventory <- station_inventory %>% 
  mutate(country = str_sub(stationId, 1, 2))
toc()

# This is the same as
# station_inventory$country =  str_sub(station_inventory$stationId, 1, 2)
```

Why was there such a difference in the time it took to run these two functions? The answer is a concept called vectorization. Vectorization means that the function will operate on all elements of a vector without needing to loop through and act on each element individually. Let's look at a simplified example to see how this works.

```{r}
#make a vector
x <- 1:4
x*2
```

The multiplication happened to each element of our vector. We can add two vectors

```{r}
#make second vector
y <- 6:9
tic()
x+y
toc()
```

Here each element of our vector x was added to the corresponding element of vector y. We could perform this addition using a loop

```{r}
#make new, empty vector
output_vector <- c()
#make loop
tic()
for (i in 1:4) {
  output_vector[i] <- x[i]+y[i]
}
output_vector
toc()
```

The time difference here is quite small. However, if we were using a much larger data set, this small difference would become significant. It is worth noting that comparison operators, logical operators, and most functions operate element-wise on vectors. Vectorized operations also work element-wise on matrices but be careful if you want to do matrix operations (ex. multiplication) rather than element-wise operations. Thus, it is important to try to use vectorized operations where you can to help your code be more efficient.

One concept related to vectorization is recycling. Recycling means that if an operation is performed on two or more vectors of unequal length, R will recycle elements of the shorter vector(s) to match the longest vector. I will demonstrate this with a brief example.

```{r}
#create vectors of unequal length
a <- 1:10
b <- 1:5
a+b
```

The elements of `a` and `b` are added together starting from the first element of both vectors. When R reaches the end of the shorter vector `b`, it starts again at the first element of `b` and continues until it reaches the last element of the longest vector `a`. This behaviour may seem crazy at first glance, but it is very useful when you want to perform the same operation on every element of a vector. For example, say we want to multiply every element of our vector `a` by 5:

```{r}
a <- 1:10
b <- 5
a * b
```

Remember there are no scalars in R, so `b` is actually a vector of length 1; in order to add its value to every element of `a`, it is *recycled* to match the length of `a`.

When the length of the longer object is a multiple of the shorter object length (as in our example above), the recycling occurs silently. When the longer object length is not a multiple of the shorter object length, a warning is given:

```{r}
a <- 1:10
b <- 1:7
a + b
```

Now that we have our inventory of weather stations with column names and country codes, let's save it as a csv to reuse later.

```{r}
write_csv(station_inventory, file = "data/processed/stationsInventory.csv")
```
