---
title: "finding_closest_station"
format: html
editor: visual
---


# Challenges

1.  Here are the coordinates for the UCSB Library (latitude, longitude) = (34.4137, -119.8455). Write a for loop that iterates over rows of "stationsInventory.csv" to calculate the distance between each row in the station inventory and the location of the UCSB Library, and return a dataframe with a row for the closest station. Use the Euclidean distance that you can calculate as sqrt( (x2-x1)\^2 + (y2-y1)\^2 ). Count how much time it takes.
2.  Instead of a loop over each row, use a vectorized function from the tidyverse, namely dplyr::mutate(). Count how much time it takes.
3. You've found an efficient method to calculate the distance to a point. But what if you need to find the nearest station for another point? Transform your loop into a function which takes five arguments: the dataframe and two of its columns with latitude and longitude values, and a latitude and a longitude for a point. 
4. Improve your function by handling possible errors. First show a warning message if the latitude is outside of (-90, 90) or if longitude is outside of (-180,180) (hint: use conditionals and the warning() function). Second, raise an error if the latitude or longitude are not of type double (hint: use conditionals, the function !is.double() to see if the the value provided is not of type double, and the function stop() to stop execution of the function and raise an error).


```{r}
library(tidyverse)
station_inventory <- read_csv(
  file = "data/processed/stationsInventory.csv"
)
```

```{r}
# Challenge 1
tic()
point_latitude = 34.4137
point_longitude = -119.8455
for (i in 1:nrow(station_inventory)) {
  station_inventory[i, "distance"] = 
    sqrt( (station_inventory[i, "latitude"] - point_latitude)^2 
          + (station_inventory[i, "longitude"] - point_longitude)^2)
}
result <- station_inventory %>% filter(distance == min(station_inventory$distance))
toc()
```

```{r}
# Challenge 2
tic()
point_latitude = 34.4137
point_longitude = -119.8455
station_inventory <- station_inventory %>% 
  mutate(distance_vectorized = sqrt( (latitude - point_latitude)^2 
                                     + (longitude - point_longitude)^2))

result <- station_inventory %>% filter(distance_vectorized == min(station_inventory$distance_vectorized))
toc()
```
```{r}
# Challenge 3
closest_station <- function(data, col_latitude, col_longitude, point_latitude, point_longitude) {
  data <- data %>% 
    mutate(distance_vectorized = sqrt( ({{ col_latitude }} - point_latitude)^2 
                                     + ({{ col_longitude }} - point_longitude)^2))

  closest_row <- data %>% filter(distance_vectorized == min(data$distance_vectorized))
  return(closest_row)
}
```

```{r}
closest_station(station_inventory, latitude, longitude, 34.4137, -119.8455)
```
```{r}
# Challenge 4.1
closest_station_warning <- function(data, col_latitude, col_longitude, point_latitude, point_longitude) {
  if (point_latitude < -90 | point_latitude > 90) {
    warning("Latitude must be a value between -90 and 90")
  }
  if (point_longitude < -180 | point_longitude > 180) {
    warning("Longitude must be a value between -180 and 180")
  }
  data <- data %>% 
    mutate(distance_vectorized = sqrt( ({{ col_latitude }} - point_latitude)^2 
                                     + ({{ col_longitude }} - point_longitude)^2))

  closest_row <- data %>% filter(distance_vectorized == min(data$distance_vectorized))
  return(closest_row)
}
```

```{r}
closest_station_warning(station_inventory, latitude, longitude, 134.4137, -119.8455)
```
```{r}
closest_station_warning(station_inventory, latitude, longitude, 134.4137, 200)
```


```{r}
# Challenge 4.2
closest_station_error <- function(data, col_latitude, col_longitude, point_latitude, point_longitude) {
  if (!is.double(point_latitude) | !is.double(point_longitude)) {
    stop("Latitude and longitude must be of type double")
  }
  if (point_latitude < -90 | point_latitude > 90) {
    warning("Latitude must be a value between -90 and 90")
  }
  if (point_longitude < -180 | point_longitude > 180) {
    warning("Longitude must be a value between -180 and 180")
  }
  
  data <- data %>% 
    mutate(distance_vectorized = sqrt( ({{ col_latitude }} - point_latitude)^2 
                                     + ({{ col_longitude }} - point_longitude)^2))

  closest_row <- data %>% filter(distance_vectorized == min(data$distance_vectorized))
  return(closest_row)
}
```

```{r}
closest_station_error(station_inventory, latitude, longitude, 134.4137, "200")
```







